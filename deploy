#!/usr/bin/env python
# Couchbase Cluster deployer for OpenStack Clouds
#
# Deploys a Couchbase Cluster using the community edition on top of OpenStack
# using Python, Heat, Ansible
#
# Usage: ./deploy stack-name [--num-data-nodes=3] [--update]
#
# Options:
#   --num-data-nodes	Integer 	Number of Couchbase data nodes to deploy
#   -h, --help		Empty		Show this help
#   -update		Boolean 	Send stack update request
#
# Examples:
#   ./deploy couchbase				Deploys couchbase cluster
#   ./deploy couchbase --num-data-nodes=4	Deploys couchbase cluster with 4 data nodes
#   ./deploy couchbase --num-data-nodes=5  	Runs stack update to add a data node
#

import sys
import getopt
import os
import time
import json
import paramiko
import socket

from heatclient.client import Client as Heat_Client
from heatclient.v1.stacks import StackManager as Stack_Manager
from keystoneclient.v2_0 import Client as Keystone_Client

from collections import namedtuple
from ansible.parsing.dataloader import DataLoader
from ansible.vars import VariableManager
from ansible.inventory import Inventory
from ansible.playbook.play import Play
from ansible.executor.playbook_executor import PlaybookExecutor
from ansible.executor.task_queue_manager import TaskQueueManager
from ansible.plugins.callback import CallbackBase

def usage():
  print 'Usage: '+sys.argv[0]+' stack-name [--num-data-nodes=2 --key-name=my_key --public-network=external --private-network=tenant --image-name=rhel72 --flavor=m1.small --update]'

def check_server_available(ip_address, username, private_key_file, command):
  ssh = paramiko.SSHClient()
  ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  available = False
  while available == False:
    try:
       private_key = paramiko.RSAKey.from_private_key_file(private_key_file)
       ssh.connect(ip_address, username=username, pkey = private_key)
       available = True
       break
    except paramiko.AuthenticationException:
       # print "check_server_available: Double check username and private_key_file"
       continue
    except socket.error:
       # print "check_server_available: Server %s is not available yet" % ip_address
       continue
    else:
       break

  ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(command)
  for line in ssh_stdout:
    print line


def get_keystone_creds():
  d = {}
  d['username'] = os.environ['OS_USERNAME']
  d['password'] = os.environ['OS_PASSWORD']
  d['auth_url'] = os.environ['OS_AUTH_URL']
  d['tenant_name'] = os.environ['OS_TENANT_NAME']
  return d

def get_stack_outputs(stack, search):
  outputList = []

  stack_outputs = stack.outputs
  for item in stack_outputs:
    output = item
    dump_out = json.dumps(output)
    parsed_json = json.loads(dump_out)
    if search in (parsed_json['output_key']):
      outputList.append(parsed_json['output_value'])

  return outputList


def main(argv):

  #Define defaults for parameters
  stackName = "couchbase"
  numDataNodes = 2
  updateStack = False
  keyName="my_key"
  publicNetwork = "external"
  imageName = "rhel72"
  flavor = "m1.small"

  if (len(argv) > 0):
    if (argv[0] != ""):
      if ("--" not in argv[0]):
        stackName = argv[0]
        argv.pop(0)

  try:
    opts, args = getopt.getopt(argv, "h", ["help", "num-data-nodes=", "key-name=", "public-network=", "image-name=", "flavor="])
  except getopt.GetoptError:
    usage()
    sys.exit(2)

  for opt, arg in opts:
    if opt in ("-h", "--help"):
      usage()
      sys.exit()
    elif opt == "--num-data-nodes":
      numDataNodes = arg
    elif opt == "--key-name":
      keyName = arg
    elif opt == "--public-network":
      publicNetwork = arg
    elif opt == "--image-name":
      imageName = arg
    elif opt == "--flavor":
      flavor = arg

  cred = get_keystone_creds()
  ks_client = Keystone_Client(**cred)
  heat_endpoint = ks_client.service_catalog.url_for(service_type='orchestration', endpoint_type='publicURL')
  heatclient = Heat_Client('1', heat_endpoint, token=ks_client.auth_token)

  start_time = time.time()

  template_file = 'heat/couchbase_community.yaml'
  template = open(template_file, 'r')
  read_template = template.read()

  env_file = 'heat/env.yaml'
  env = open(env_file, 'r')
  read_env = env.read()

  stacks = heatclient.stacks.list()
  for stack in stacks:
    if stack.stack_name == stackName:
      updateStack = True
      break
 
  if updateStack:
    print "Updating Couchbase stack named %s" % stackName
    stack = heatclient.stacks.update(
                                      stackName,
                                      template=read_template,
                                      environment=read_env,
                                      parameters={
                                        'flavor':flavor,
                                        'image_name':imageName,
                                        'key_name':keyName,
                                        'public_network':publicNetwork,
                                        'num_data_instances':numDataNodes
                                      },
                                      poll=5
                                    )

    while True:
      stack_get = heatclient.stacks.get(stackName)
      
      if stack_get.stack_status == "UPDATE_IN_PROGRESS":
        print "Update stack in progress ..."
        time.sleep(5)
      elif stack_get.stack_status == "UPDATE_COMPLETE":
        break
  else:
    print "Creating Couchbase stack named %s" % stackName
    stack = heatclient.stacks.create(
                                     stack_name=stackName,
                                     template=read_template,
                                     environment=read_env,
                                     parameters={
                                       'flavor':flavor,
                                       'image_name':imageName,
                                       'key_name':keyName,
                                       'public_network':publicNetwork,
                                       'num_data_instances':numDataNodes
                                     },
                                     poll=5
                                   )

    uid = stack['stack']['id']
    stack = heatclient.stacks.get(stack_id=uid).to_dict()

    while stack['stack_status'] == 'CREATE_IN_PROGRESS':
      stack = heatclient.stacks.get(stack_id=uid).to_dict()
      print "Create stack in progress ..."
      time.sleep(5)
    if stack['stack_status'] == 'CREATE_COMPLETE': 
      for it in stack['outputs']: 
        print "{key}: {val}".format(key=it['output_key'], val=it['output_value']) 
      print "Stack succesfully created." 
    else: 
      print "Stack create failed." 

  stack_get = heatclient.stacks.get(stackName)

  #Get IPs for master node
  masterFloatingIpList = get_stack_outputs(stack_get, "cb_cluster_master_floating_ip")
  masterPrivateIpList = get_stack_outputs(stack_get, "cb_cluster_master_private_ip")

  #Get IPs for data nodes
  dataNodeFloatingIpList = get_stack_outputs(stack_get, "cb_cluster_data_group_floating_ips")
  dataNodePrivateIpList = get_stack_outputs(stack_get, "cb_cluster_data_group_private_ips")

  #Going to combine these lists for now. Will add ansible through proxy later
  #and will switch to using private IPs for data nodes
  couchbase_floating_ips = masterFloatingIpList
  for x in dataNodeFloatingIpList[0]:
    couchbase_floating_ips.append(x)

  couchbase_private_ips = []
  for x in dataNodePrivateIpList[0]:
    couchbase_private_ips.append(x)

  print couchbase_floating_ips
  print couchbase_private_ips
 
  print "Waiting for instances to become available - checking for password-less ssh access"

  for x in couchbase_floating_ips:
      check_server_available(x, 'cloud-user', '/home/kejones/kdj.pem', 'hostname')

  # initialize needed objects
  variable_manager = VariableManager()
  loader = DataLoader()

  inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list=couchbase_floating_ips)
  playbook_path = 'ansible/couchbase_install_OpenStack.yml'

  if not os.path.exists(playbook_path):
    print '[INFO] The playbook does not exist'
    sys.exit()

  Options = namedtuple('Options', ['listtags', 'listtasks', 'listhosts', 'syntax', 'connection','module_path', 'forks', 'remote_user', 'private_key_file', 'ssh_common_args', 'ssh_extra_args', 'sftp_extra_args', 'scp_extra_args', 'become', 'become_method', 'become_user', 'verbosity', 'check'])

  # the "private_key_file" will be taken from the "ansible.cfg" file
  # The ansible.cfg file contains "host_key_checking = False" so that
  # newly created OpenStack instances do not prompt for ssh permission.
  options = Options(listtags=False, listtasks=False, listhosts=False, syntax=False, connection='ssh', module_path="", forks=100, remote_user='cloud-user', private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=True, become_method='sudo', become_user='root', verbosity=None, check=False)

  passwords = {}

  pbex = PlaybookExecutor(playbooks=[playbook_path], inventory=inventory, variable_manager=variable_manager, loader=loader, options=options, passwords=passwords)

  results = pbex.run()

  if not updateStack:
    print "\n Waiting before Couchbase cluster init"
    time.sleep(30)

    variable_manager2 = VariableManager()
    loader2 = DataLoader()

    playbook_path2 = 'ansible/couchbase_init_cluster_OpenStack.yml'

    if not os.path.exists(playbook_path2):
      print '[INFO] The playbook does not exist'
      sys.exit()

    variable_manager2.extra_vars = {'cluster_main_ip' : masterFloatingIpList[0],
                                'admin_user' : 'Administrator',
                                'admin_password' : 'Vinson#12',
                                'cluster_ram_quota' : '2048' 
                                }

    inventory2 = Inventory(loader=loader2, variable_manager=variable_manager2, host_list=[masterFloatingIpList[0]])
    pbex2 = PlaybookExecutor(playbooks=[playbook_path2], inventory=inventory2, variable_manager=variable_manager2, loader=loader2, options=options, passwords=passwords)

    results = pbex2.run()

  print "\n Waiting before adding nodes to cluster"
  time.sleep(30)

  # Add Nodes
  print "\n Adding nodes to Couchbase cluster and a data bucket"

  variable_manager3 = VariableManager()
  loader3 = DataLoader()

  playbook_path3 = 'ansible/couchbase_config_cluster_OpenStack.yml'

  if not os.path.exists(playbook_path3):
    print '[INFO] The playbook does not exist'
    sys.exit()

  variable_manager3.extra_vars = {'cluster_main_ip' : masterFloatingIpList[0],
                                'cluster_node_ips' : [couchbase_private_ips],
                                'admin_user' : 'Administrator',
                                'admin_password' : 'Vinson#12',
                                'cluster_ram_quota' : '2048',
                                'server_port' : '8091',
                                'bucket_name' : 'kejones',
                                'bucket_ram_quota' : '512',
                                'num_replicas' : '2'
                                }

  inventory3 = Inventory(loader=loader3, variable_manager=variable_manager3, host_list=[masterFloatingIpList[0]])
  pbex3 = PlaybookExecutor(playbooks=[playbook_path3], inventory=inventory3, variable_manager=variable_manager3, loader=loader3, options=options, passwords=passwords)

  results = pbex3.run()

  elapsed_time = time.time() - start_time
  m, s = divmod(elapsed_time, 60)
  h, m = divmod(m, 60)

  print "Message from Couchbase Configuration ..."
  print "  Couchbase Stack completed in: %d:%02d:%02d" % (h, m, s)
  print "  Couchbase console can be accessed at %s:8091\n\n" % masterFloatingIpList[0]

  exit()

if __name__ == "__main__":
    main(sys.argv[1:])
